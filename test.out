  0%|          | 0/41 [00:00<?, ?it/s]
4410400
DRR:   0%|          | 0/450 [00:00<?, ?it/s]
DRR:   0%|          | 0/450 [00:00<?, ?it/s]
FBP:   0%|          | 0/400 [00:00<?, ?it/s]
FBP:   0%|          | 0/350 [00:00<?, ?it/s]
Resize:   0%|          | 0/50 [00:00<?, ?it/s]
4404367
DRR:   0%|          | 0/450 [00:00<?, ?it/s]
DRR:   0%|          | 0/450 [00:00<?, ?it/s]
FBP:   0%|          | 0/400 [00:00<?, ?it/s]
FBP:   0%|          | 0/350 [00:00<?, ?it/s]
Resize:   0%|          | 0/50 [00:00<?, ?it/s]
4410828
DRR:   0%|          | 0/450 [00:00<?, ?it/s]
DRR:   0%|          | 0/450 [00:00<?, ?it/s]
FBP:   0%|          | 0/400 [00:00<?, ?it/s]
FBP:   0%|          | 0/350 [00:00<?, ?it/s]
Resize:   0%|          | 0/50 [00:00<?, ?it/s]
4404147
DRR:   0%|          | 0/450 [00:00<?, ?it/s]
DRR:   0%|          | 0/450 [00:00<?, ?it/s]
FBP:   0%|          | 0/400 [00:00<?, ?it/s]
FBP:   0%|          | 0/350 [00:00<?, ?it/s]
Resize:   0%|          | 0/50 [00:00<?, ?it/s]
4404150
DRR:   0%|          | 0/450 [00:00<?, ?it/s]
Traceback (most recent call last):
  File "/home/mfujita/Documents/research/prepare.py", line 36, in <module>
    main()
  File "/home/mfujita/Documents/research/prepare.py", line 30, in main
    p = patient.patient(name=vol)
  File "/home/mfujita/Documents/research/patient/patient.py", line 38, in __init__
    self.generate_ct()
  File "/home/mfujita/Documents/research/patient/patient.py", line 76, in generate_ct
    self.generate_drr()
  File "/home/mfujita/Documents/research/patient/patient.py", line 83, in generate_drr
    self.drr = drr.drrset(ctset=self.ct, num_views=self.num_views)
  File "/home/mfujita/Documents/research/drr/drr.py", line 101, in __init__
    img_tensor = drr(**detector_kwargs)
  File "/home/mfujita/.local/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1194, in _call_impl
    return forward_call(*input, **kwargs)
  File "/home/mfujita/Documents/research/drr/DiffDRR/diffdrr/drr.py", line 91, in forward
    drr = self.siddon.raytrace(source, rays)
  File "/home/mfujita/Documents/research/drr/DiffDRR/diffdrr/projectors/siddon.py", line 77, in raytrace
    voxels = self.get_voxel(alphamid, source, target)
  File "/home/mfujita/Documents/research/drr/DiffDRR/diffdrr/projectors/siddon.py", line 62, in get_voxel
    idxs = (
torch.cuda.OutOfMemoryError: CUDA out of memory. Tried to allocate 1.08 GiB (GPU 0; 11.76 GiB total capacity; 5.22 GiB already allocated; 1.08 GiB free; 5.86 GiB reserved in total by PyTorch) If reserved memory is >> allocated memory try setting max_split_size_mb to avoid fragmentation.  See documentation for Memory Management and PYTORCH_CUDA_ALLOC_CONF

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/mfujita/Documents/research/prepare.py", line 42, in <module>
    slack(e)
  File "/home/mfujita/Documents/research/prepare.py", line 20, in slack
    r = requests.post(webhooks_url, data=json.dumps(payload))
  File "/home/mfujita/anaconda3/envs/res/lib/python3.10/json/__init__.py", line 231, in dumps
    return _default_encoder.encode(obj)
  File "/home/mfujita/anaconda3/envs/res/lib/python3.10/json/encoder.py", line 199, in encode
    chunks = self.iterencode(o, _one_shot=True)
  File "/home/mfujita/anaconda3/envs/res/lib/python3.10/json/encoder.py", line 257, in iterencode
    return _iterencode(o, 0)
  File "/home/mfujita/anaconda3/envs/res/lib/python3.10/json/encoder.py", line 179, in default
    raise TypeError(f'Object of type {o.__class__.__name__} '
TypeError: Object of type OutOfMemoryError is not JSON serializable
